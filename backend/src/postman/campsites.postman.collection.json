{
    "info": {
        "name": "Camping Advisor â€“ Campsites",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Create campsite",
            "request": {
                "method": "POST",
                "header": [
                    { "key": "Content-Type", "value": "application/json" }
                ],
                "url": "{{baseUrl}}/campsites",
                "body": {
                    "mode": "raw",
                    "raw": "{\"name\":\"Test Camp\",\"lat\":51.5,\"lon\":-0.1,\"description\":\"there is a lake\"}"
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('returns 200 OK', () => pm.response.to.have.status(200));",
                            "pm.test('responds with JSON', () => pm.response.to.be.json);",
                            "const json = pm.response.json();",
                            "pm.test('includes required fields', () => { pm.expect(json).to.have.property('id'); pm.expect(json).to.have.property('name'); pm.expect(json).to.have.property('lat'); pm.expect(json).to.have.property('lon'); });",
                            "pm.environment.set('campsite_id', json.id);"
                        ]
                    }
                }
            ]
        },
        {
            "name": "List campsites",
            "request": {
                "method": "GET",
                "url": "{{baseUrl}}/campsites"
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('returns 200 OK', () => pm.response.to.have.status(200));",
                            "pm.test('responds with JSON', () => pm.response.to.be.json);",
                            "pm.test('returns an array', () => pm.expect(pm.response.json()).to.be.an('array'));"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Search campsites",
            "request": {
                "method": "GET",
                "url": "{{baseUrl}}/campsites/search?q=lake"
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('returns 200 OK', () => pm.response.to.have.status(200));",
                            "pm.test('responds with JSON', () => pm.response.to.be.json);",
                            "const json = pm.response.json();",
                            "pm.test('returns an array of campsites', () => { pm.expect(json, 'expected an array').to.be.an('array'); });"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Get campsite by id",
            "request": {
                "method": "GET",
                "url": "{{baseUrl}}/campsites/{{campsite_id}}"
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('returns 200 OK', () => pm.response.to.have.status(200));",
                            "pm.test('responds with JSON', () => pm.response.to.be.json);",
                            "const json = pm.response.json();",
                            "pm.test('includes required fields', () => { pm.expect(json).to.have.property('id'); pm.expect(json).to.have.property('name'); pm.expect(json).to.have.property('lat'); pm.expect(json).to.have.property('lon'); });"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Update campsite",
            "request": {
                "method": "PUT",
                "header": [
                    { "key": "Content-Type", "value": "application/json" }
                ],
                "url": "{{baseUrl}}/campsites/{{campsite_id}}",
                "body": {
                    "mode": "raw",
                    "raw": "{\"description\":\"Updated\"}"
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('returns 200 OK', () => pm.response.to.have.status(200));",
                            "pm.test('responds with JSON', () => pm.response.to.be.json);",
                            "const json = pm.response.json();",
                            "pm.test('updated description', () => pm.expect(json).to.have.property('description', 'Updated'));"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Delete campsite",
            "request": {
                "method": "DELETE",
                "url": "{{baseUrl}}/campsites/{{campsite_id}}"
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('returns 200 OK', () => pm.response.to.have.status(200));",
                            "pm.test('responds with JSON', () => pm.response.to.be.json);",
                            "pm.test('acknowledges deletion', () => pm.expect(pm.response.json()).to.deep.equal({ ok: true }));"
                        ]
                    }
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "const token = pm.environment.get('token');",
                    "if (token) {",
                    "  pm.request.headers.add({ key: 'Authorization', value: `Bearer ${token}` });",
                    "} else {",
                    "  pm.request.headers.remove('Authorization');",
                    "}"
                ]
            }
        }
    ],
    "variable": []
}
